선언형 스타일 채택

선언형 스타일은 개발자가 순서대로 무엇을 해야할지 작성하는 명령어 스타일과 달리, 실행 결과가 어떻게 되어야 할지를 코드로 작성한다.
선언형으로 작성하면 복잡도를 줄여줄 뿐만 아니라 코드에 대한 이해도와 가독성을 높일 수 있기 때문이다.
두 가지 방식의 차이를 이해할 수 있는 간단한 자바스크립트 예제를 살펴본다.

var arr = [1, 2, 3, 4, 5],
arr2 = []
for (var i=0; i < arr.length; i++)
{
    arr2[i] = arr[i]*2
}
console.log('a', arr2)

var arr = [1, 2, 3, 4, 5],
arr2 = arr.map(function(v, i){ return i * 2})
console.log('b', arr2);


var profile = {account: '47574416'}
var profileDeep = {account: { number: 47574416}}
console.log(getNestedValueImperatively(profile, 'account') === '47574416')
console.log(getNestedValueImperatively(profileDeep, 'account.number') === '47574416')


// 명령형
var getNestedValueImperatively = function getNestedValueImperatively (object, propertyName) {
    var currentObject = objectvar 
    var propertyName = propertyName.split('.')
    var maxNestedLevel = propertyNamesList.length
    var currentNestedLevel

    for (currentNestedLevel = 0; currentNestedLevel < maxNestedLevel; currentNestedLevel++)
    {
        if (!currentObject || typeof currentObject === 'undefined') return undefined
        currentObject = currentObject[propertyNamesList[currentNestedLevel]]
    }

    return currentObject
}

// 선언형
var getValue = function getValue(object, propertyName){
    return typeof object === 'undefined' ? undefined : object[propertyName]
}

var getNestedValueImperatively = function getNestedValueImperatively(object, propertyName)
{
    return propertyName.split('.').reduce(getValue, object);
}

위의 코드를 보면 선언형이 더 간결하다.

React도 마찬가지로 UI를 구성할 때 선언형 스타일로 작성한다. 개발자가 UI 요소를 선언형 스타일로 작성한 후 뷰에 변경이 발생하는 경우 React가 알아서 갱신한다.
뷰를 갱신해야 할 때가 바로 선언형 스타일이 빛을 발하는 순간이다. 이것을 내부 상태(inner state) 변화라고 부른다. React는 상태 변경에 따라 뷰를 갱신한다.

React는 내부적으로 가상 DOM을 사용하여 브라우저에 이미 반영된 뷰와 새로운 뷰의 차이점을 찾아낸다. 이 괒어을 DOM 비교 또는 상태와 뷰의 보정이라고 부른다.
따라서 개발자는 명시적으로 뷰를 변경하려고 노력할 필요가 없다. 상태를 갱신하면 뷰는 이에 따라 자동으로 갱신된다. 


템플릿의 문제점 : 개발자가 다른 언어를 배워야 한다는 점인데 React는 순수한 자바스크립트이므로 새로운 언어를 배울 필요가 없다. 

강력한 추상화 : 
React는 강력한 문서 모델 추상화를 제공한다. 좀 더 자세히 말하면 내부의 인터페이스는 숨기고, 대신에 정규화 과정을 거친 합성 메서드와 속성을 제공한다.
예를 들어 React에서 onClick 이벤트가 발생하면, 이벤트 핸들러는 브라우저의 원본 이벤트 객체 대신 이 원본 객체를 감싼 합성 이벤트 객체(synthetic event object)를 전달받는다.


속도의 측면등 여러가지 이야기가 나오는데,, 여기에 다 쓰기에는 무리가 있다.. 일단 읽고나서 Hello World등을 쳐보면서 익히고자 한다

SUMMARY

- React는 선언적이며, 뷰 또는 UI 레이어의 역할만 한다.
- React는 ReactDOM.render() 메서드를 통해 컴포넌트를 실제로 사용한다.
- React 컴포넌트는 클래스로 생성하고 필수적인 render() 메서드를 포함한다.
- React 컴포넌트는 재사용할 수 있고, 불가변 속성을 전달 받아서 this.props.NAME으로 접근할 수 있다.